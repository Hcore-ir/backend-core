# Generated by Django 5.2.3 on 2025-07-03 21:35

import django.db.models.deletion
import tinymce.models
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MedicalFacilityOwnershipType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                (
                    "title",
                    models.CharField(max_length=255, verbose_name="Ownership Type"),
                ),
            ],
            options={
                "verbose_name": "Ownership Type",
                "verbose_name_plural": "Ownership Types",
            },
        ),
        migrations.CreateModel(
            name="MedicalFacilitySubType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                (
                    "title",
                    models.CharField(
                        max_length=255, verbose_name="Facility Subtype Title"
                    ),
                ),
            ],
            options={
                "verbose_name": "Facility Subtype (Specialty)",
                "verbose_name_plural": "Facility Subtypes (Specialties)",
            },
        ),
        migrations.CreateModel(
            name="MedicalFacilityType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                (
                    "title",
                    models.CharField(
                        max_length=255, verbose_name="Facility Type Title"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MedicalFacility",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="Facility Name"),
                ),
                (
                    "history",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Provide a historical background of the facility.",
                        verbose_name="Facility History",
                    ),
                ),
                (
                    "presentation",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Describe the mission, values, or goals of the facility.",
                        verbose_name="Mission and Vision",
                    ),
                ),
                (
                    "legal_charters",
                    tinymce.models.HTMLField(
                        blank=True,
                        help_text="Include any official charters, patient rights, or legal documents.",
                        verbose_name="Legal Charters / Declarations",
                    ),
                ),
                ("city", models.CharField(max_length=100)),
                ("province", models.CharField(max_length=100)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("website", models.URLField(blank=True)),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="facilities/logos/",
                        verbose_name="Facility Logo",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "ownership",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="facilities",
                        to="facilities.medicalfacilityownershiptype",
                        verbose_name="Ownership Type",
                    ),
                ),
                (
                    "subtype",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="facilities",
                        to="facilities.medicalfacilitysubtype",
                        verbose_name="Facility Subtype",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="facilities",
                        to="facilities.medicalfacilitytype",
                        verbose_name="Facility Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Medical Facility",
                "verbose_name_plural": "Medical Facilities",
                "ordering": ["-created_at"],
            },
        ),
    ]
